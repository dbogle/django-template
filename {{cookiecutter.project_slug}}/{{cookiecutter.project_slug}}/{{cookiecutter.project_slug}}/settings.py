"""
Django settings for {{cookiecutter.project_name}} project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
from django.contrib.messages import constants as messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    '{{cookiecutter.project_slug}}_SECRET_KEY', '!)=$%zf)1a_dren+231(^*q8uy#9hm)6hgt_&*7=g#@lhny2*t')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if '{{cookiecutter.project_slug | title}}_DEBUG' in os.environ else False

ALLOWED_HOSTS = ['localhost', '127.0.0.1',
                 '{{cookiecutter.project_url}}', 'www.{{cookiecutter.project_url}}']

MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}

# Application definition
AUTH_USER_MODEL = 'common.User'


INSTALLED_APPS = [
    'common.apps.CommonConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        # Include the default Django email handler for errors
        # This is what you'd get without configuring logging at all.
        # 'mail_admins': {
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'level': 'ERROR',
        #      # But the emails are plain text by default - HTML is nicer
        #     'include_html': True,
        # },
        # Log to a text file that can be rotated by logrotate
        'logfile': {
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': './lifecoach.log'
        },
    },
    'loggers': {
        # Again, default Django configuration to email unhandled exceptions
        # 'django.request': {
        #     'handlers': ['mail_admins'],
        #     'level': 'ERROR',
        #     'propagate': True,
        # },
        # Might as well log any errors anywhere else in Django
        'django': {
            'handlers': ['logfile'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Your own app - this assumes all your logger names start with "myapp."
        'lifecoach': {
            'handlers': ['logfile'],
            'level': 'WARNING',  # Or maybe INFO or DEBUG
            'propagate': False
        },
    },
}

ROOT_URLCONF = '{{cookiecutter.project_slug}}.urls'
REGISTRATION_SALT = os.environ.get(
    '{{cookiecutter.project_slug|title}}_SALT', 'jfndjsak;uy849p3qhjkfds;ahjj')
ACCOUNT_ACTIVATION_DAYS = 7
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), os.path.join(BASE_DIR, 'common', 'templates', 'common')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{cookiecutter.project_slug}}.wsgi.application'

# Email settings
{%- if cookiecutter.email == 'y' %}
# EMAIL_HOST = 'smtp.mailgun.org'
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'postmaster@{{cookiecutter.project_url}}'
# EMAIL_HOST_PASSWORD = os.environ.get('MAILGUN_PASSWORD', None)
# EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = 'Help@{{cookiecutter.project_url}}'
{%- endif %}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# TODO: Add support for postgres using cookie cutter
{%- if cookiecutter.database == 'postgres' %}
# Do postgres config
{%- else %}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
{%- endif %}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = '{{cookiecutter.timezone}}'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

FILE_UPLOAD_PERMISSIONS = 0o644
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/accounts/login'
